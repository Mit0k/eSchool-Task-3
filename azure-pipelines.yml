variables:
  PROJECT: $(System.TeamProject)
  ORG: $(System.TeamFoundationCollectionUri)
  variableGroupsNotExist: ""

trigger:
  - master

pool:
  vmImage: 'windows-latest'
  
stages:
  - stage: ARM_Testing
    jobs:
    - job: ARMTTK
      steps:
        - task: RunARMTTKTests@1
          displayName: Run ARM TTK tests 
          name: TTKtests
          inputs:
            templatelocation: '$(System.DefaultWorkingDirectory)\templates'
            resultLocation: '$(System.DefaultWorkingDirectory)\results'

        - task: PublishTestResults@2
          displayName: Publish test restults
          name: PublishResults
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '$(System.DefaultWorkingDirectory)\results\*-armttk.xml'
          condition: always()

  - stage: Deploying_infrastructure
    jobs:
    - job: ARM_Template_deploying
      steps:       
        - task: AzurePowerShell@5 
          name: PS_Deployment
          inputs:
            azureSubscription: 'Azure2'
            ScriptType: 'FilePath'
            ScriptPath: 'templates/azuredeploy.ps1'
            ScriptArguments: -Location ${env:LOCATION} -ResourceGroupName ${env:GROUP} -prefix ${env:prefix} -DatabasePassword $env:MAPPED_ENV_DB_PASS -TemplateFile templates\azuredeploy.json -TemplateParameterFile templates\azuredeploy.parameters.json
            azurePowerShellVersion: 'LatestVersion'
          env:
            MAPPED_ENV_DB_PASS: $(DatabasePassword)

  - stage: Create_variables_group
    variables:
      webappName: $[ stageDependencies.Deploying_infrastructure.ARM_Template_deploying.outputs['PS_Deployment.webappName'] ]
    jobs:
      - job:
        steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'Azure2'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az devops configure --defaults organization=$(ORG) project=$(PROJECT)
              echo  $AZURE_DEVOPS_EXT_PAT | az devops login --organization $(ORG)
            failOnStandardError: true
          env:
            AZURE_DEVOPS_EXT_PAT: $(AzDevOpsCli-Token)
    
        - task: AzureCLI@2
          continueOnError: true
          inputs:
            azureSubscription: 'Azure2'
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $variableGroups=(az pipelines variable-group list)
              $jsonObj = $variableGroups | ConvertFrom-Json
              Write-Host "VG-${env:prefix}"
              if ($jsonObj.name -contains "VG-${env:prefix}") {
                Write-Host 'Here1'
                Write-Host "Variable group exist"
                Write-Host "##vso[task.setvariable variable=variableGroupsNotExist;]false"
                $index = $jsonObj.name.IndexOf("VG-${env:prefix}")
                $VG_id = $jsonObj.id[$index]
                Write-Host "##vso[task.setvariable variable=VG_id;]$VG_id"}
              else
              {
                Write-Host 'Here2'
                Write-Host "##vso[task.setvariable variable=variableGroupsNotExist;]true"
              }
           

  
        - task: AzureCLI@2
          condition: eq(variables.variableGroupsNotExist, 'true')
          inputs:
            azureSubscription: 'Azure2'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az pipelines variable-group create --organization=$(ORG) --project=$(PROJECT) \
              --name VG-$(prefix) --variables ResourceGroupName=$(GROUP) \
                                        WebAppName=$(webappName)
                                          
        - task: AzureCLI@2
          condition: eq(variables.variableGroupsNotExist, 'false')
          inputs:
            azureSubscription: 'Azure2'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo $(webappName)
              az pipelines variable-group variable update --id $(VG_id) --name ResourceGroupName --value $(GROUP)
              az pipelines variable-group variable update --id $(VG_id) --name WebAppName --value $(webappName)
    